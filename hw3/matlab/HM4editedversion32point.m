%--------------------------------Home WorK 4-------------------------------
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
clear
clc
close all
syms s n
sym('s','real')
sym('n','real')
Ey=100;
nu=0.45;
%--------------------------------------------------------------------------
% shape function based on equation (1)
%--------------------------------------------------------------------------
N1=0.25*(1-s)*(1-n);
N2=0.25*(1+s)*(1-n);
N3=0.25*(1+s)*(1+n);
N4=0.25*(1-s)*(1+n);
%--------------------------------------------------------------------------
%intial values 
%--------------------------------------------------------------------------
Nzita=0.25*[diff(N1,s) diff(N1,n);diff(N2,s) diff(N2,n);
    diff(N3,s) diff(N3,n);diff(N4,s) diff(N4,n)];
N=[N1 N2 N3 N4];
M=[s n];
ss=[-1 1 1 -1];
nn=[-1 -1 1 1];
X=[0 5 5 0];
Y=[0 2 5 8];
UX=ones(4,1)*0.01;
UY=ones(4,1)*0.01;
U=ones(4,2)*0.01;
dxs=sym(zeros(2,2));
%--------------------------------------------------------------------------
% acoording to equation (4) for calculating X,zita
%--------------------------------------------------------------------------
BZ1=0.25*[(n-1) (1-s)];
BZ2=0.25*[(1-n) (s-1)];
BZ3=0.25*[(1+n) (s+1)];
BZ4=0.25*[(-1-n)   (1-s)];

Fzita=[X(1);Y(1)]*BZ1+[X(2);Y(2)]*BZ2+[X(3);Y(3)]*BZ3+[X(4);Y(4)]*BZ4;
J0=det(Fzita);
%--------------------------------------------------------------------------
%according to equation (7) [NI,x NI,y] and Finding B0I
%--------------------------------------------------------------------------
DN1X=(Fzita^-1)*BZ1';
DN2X=(Fzita^-1)*BZ2';
DN3X=(Fzita^-1)*BZ3';
DN4X=(Fzita^-1)*BZ4';

B0I=[DN1X DN2X DN3X DN4X]
%--------------------------------------------------------------------------
%findig the gradient of deformation
%--------------------------------------------------------------------------
for iji=1:10
    Gen=iji

H=U'*B0I';
F=ones(2,2)+H;
%--------------------------------------------------------------------------
%calculating green tensor strain
%--------------------------------------------------------------------------
E=0.5*(H+H'+H'*H);
Est = Ey/(1-nu^2);
nust=nu/(1-nu);
C_SE = (Est/1-nust^2)*[1 nust 0; nust 1 0; 0 0 (1-nust)/2];
EE(1)=E(1,1);
EE(2)=E(2,2);
EE(3)=E(1,2);
%--------------------------------------------------------------------------
%calculating S
%--------------------------------------------------------------------------
 SS = C_SE*EE';
 S(1,1)=SS(1);
 S(2,2)=SS(2);
 S(1,2)=SS(3);
 S(2,1)=SS(3);
%--------------------------------------------------------------------------
%calculating P 
%-------------------------------------------------------------------------- 
P = S.*F';
%--------------------------------------------------------------------------
%f_internal
%--------------------------------------------------------------------------
MI2=B0I'*P*J0;
FII=matlabFunction(MI2);
NV=[0.5774 -0.5774];
W=[1 1 ];
F2=zeros(4,2);
for ik=1:2
    for jk=1:2
       
        F2=F2+W(ik)*W(jk)*feval(FII,NV(ik),NV(jk));
    end
end
f_int=F2;
%-------------------------------------------------------------------------- 
%--------------------------------------------------------------------------
 %Calculating f external
f_ext(1)=int(int(dot(N2*[1 0],[1000;500]),s,-1,1),n,-1,1);
f_ext(2) = int(int(dot(N2*[0 1],[1000;500]),s,-1,1),n,-1,1);
f_ext(3) = int(int(dot(N3*[1 0],[1000;500]),s,-1,1),n,-1,1);
f_ext(4) = int(int(dot(N3*[0 1],[1000;500]),s,-1,1),n,-1,1);
f_ext= [0 0;f_ext(1) f_ext(2);f_ext(3) f_ext(4);0 0];
%--------------------------------------------------------------------------
%calculatin BB according to eq (9)

 BB0=simplify([B0I(1,1) 0 B0I(1,2) 0 B0I(1,3) 0 B0I(1,4) 0;
    0 B0I(2,1) 0 B0I(2,2) 0 B0I(2,3) 0 B0I(2,4);
  B0I(1,1) B0I(2,1) B0I(1,2) B0I(2,2) B0I(1,3) B0I(2,3) B0I(1,4) B0I(2,4)]);
   
%-------------------------------------------------------------------------- 
%Kmat=int(int(BB0'*C_SE*BB0,s,-1,1),n,-1,1);
%-------------------------------------------------------------------------- 
I=BB0'*C_SE*BB0;
MI=matlabFunction(I);
NV=[0.5774 -0.5774];
W=[1 1 ];
FW=zeros(8,8);
for ik=1:2
    for jk=1:2
    FW=FW+W(ik)*W(jk)*feval(MI,NV(ik),NV(jk));
    end
end
Kmat=FW;
dett=det(Kmat)

%--------------------------------------------------------------------------
 %Calculating HH based on eq(10 ) for calculationg the K geo
 %hh=int(int(B0I'*S*B0I,s,-1,1),n,-1,1);
%--------------------------------------------------------------------------
IH=B0I'*S*B0I;
MH=matlabFunction(IH);
FH=zeros(4,4)
for ik=1:2
    for jk=1:2
               FH=FH+W(ik)*W(jk)*feval(MH,NV(ik),NV(jk));
    end
end
hh=FH;
HH=[hh(1,1) 0 hh(1,2) 0 hh(1,3) 0 hh(1,4) 0;
     0 hh(1,1) 0 hh(1,2) 0 hh(1,3) 0 hh(1,4);
     hh(2,1) 0 hh(2,2) 0 hh(2,3) 0 hh(2,4) 0;
     0 hh(2,1) 0 hh(2,2) 0 hh(2,3) 0 hh(2,4);
     hh(3,1) 0 hh(3,2) 0 hh(3,3) 0 hh(3,4) 0;
     0 hh(3,1) 0 hh(3,2) 0 hh(3,3) 0 hh(3,4);
      hh(4,1) 0 hh(4,2) 0 hh(4,3) 0 hh(4,4) 0;
     0 hh(4,1) 0 hh(4,2) 0 hh(4,3) 0 hh(4,4)];
 Kgeo=HH;
 %-------------------------------------------------------------------------
 %calculating residuale Kt
 %-------------------------------------------------------------------------
 KT=Kmat+Kgeo;
 R=f_ext-f_int
 KT=double(KT);
 KT(1,:)=0;KT(:,1)=0;KT(1,1)=1;
 KT(4,:)=0;KT(:,4)=0;KT(4,4)=1;
 dett=det(KT);
 %-------------------------------------------------------------------------
 %R from matrix form converted to the voigt notation because Kt is like
 %that 8*8 
 %-------------------------------------------------------------------------
 
 RVogit=[R(1,1) R(1,2) R(2,1) R(2,2) R(3,1) R(3,2) R(4,1) R(4,2)]
 delU=-RVogit*KT^-1;
 UU=[U(1,1) U(1,2) U(2,1) U(2,2) U(3,1) U(3,2) U(4,1) U(4,2)]
%--------------------------------------------------------------------------
%updating U
%--------------------------------------------------------------------------
UU=UU+delU;
U= [UU(1) UU(2); UU(3) UU(4) ;UU(5) UU(6); UU(7) UU(8)];
U=double(U)
end
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------